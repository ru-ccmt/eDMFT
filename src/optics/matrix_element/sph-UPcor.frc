SUBROUTINE COR_MAT(cornum,atom_num,KUPLIMIT,KFIRST,IEF)
  use xa3
  use mxyz
  use ablm
  use opme
  use bindex
  use struk
  use lologo
  use atspa
  use loabco
  use xrpar
  use fermi
  use radfun
  use potnlc
  use core
  use comi
  use moments 
  use lolog1, only : loor1
  !LO
  !ad
  !ad    calculates the momentum matrix elements as
  !ad    < PSI(k,n') | NABLA | PSI(k,n) >
  !ad    for each band combination (n',n) and k-point k
  !ad    for all spheres in the unit cell
  !ad
  !ad    REMARKS:
  !ad    for LOs' the loops run up to LMAX2 
  !ad    in order to use atpar in a similar way as for the LAPW's
  !ad    the radial functions are stored for each atom
  !ad
  INCLUDE 'param.inc'
  IMPLICIT REAL*8 (A-H,O-Z)
  !ad
  !ad _____________________ DEFINITION OF VARIABLES ____________________
  !ad
  integer(4) :: core_counter,jatom,k,h 
  integer(4) :: kiatt,ova,encore
  integer(4) :: pqn,nln
  integer(4) :: nnj       
  integer(4) :: ivmax,ivma
  integer(4),intent(in) :: atom_num, cornum
  COMPLEX*16  YL((LMAX+1)**2)
  COMPLEX*16  PHS,CFAC,IMAG,CZERO
  complex*16,allocatable :: PHA(:)
  integer(4) :: jjj	    !LO index for radial mesh      
  integer(4) :: z1,z2,z3
  integer(4) :: jri1  ! number of radial mesh points
  complex*16  ione
  CHARACTER *4     LATTIC                                
  CHARACTER *3     MODUS,OUTME                                         
  CHARACTER *10    BNAME,ACONT                          
  CHARACTER *80    TITLE     
  !cad
  !ole ##### Begin #####
  !ole  LOGICAL   REL,LSO,SPIN
  LOGICAL   REL,LSO,SPIN,MME_FLAG 
  !ole #####  End  #####
  LOGICAL   loor(0:lomax),lloor(0:lmax2)
  LOGICAL   lapw(0:lmax2)
  !ad
  !ad   distinguish between real and complex version
  !ad
  
  !!_REAL      REAL*8             A
  !!_COMPLEX      COMPLEX*16          A
  
  !ad
  complex*16,allocatable :: OPTX(:,:),OPTY(:,:),OPTZ(:,:)
  !      real(8),allocatable :: OPTX2(:,:),OPTY2(:,:),OPTZ2(:,:)
  complex*16,allocatable:: DOPMX(:,:,:),DOPMY(:,:,:),DOPMZ(:,:,:)
  !      real(8),allocatable:: OPMX2(:,:),OPMY2(:,:),OPMZ2(:,:)
  COMMON /LEAD/ K1,K2,KD,KSTEP,KOUT,KSTOP
  COMMON /COM/  EMIN,EMAX,ELECN,EULIMIT,EDLIMIT,NK,IOUT,NSPIN,NAT,NBAND,ix,NB(NKPT),MINWAV,MAXWAV,ifpmat
  !Clas-end
  COMMON /KPOI/ S,T,Z,NEMIN,NEMAX,KKZ,N,NNLO,BNAME                 
  COMMON /CHAR/   TITLE,LATTIC,MODUS,OUTME           
  COMMON /GENER/  BR1(3,3),BR2(3,3)                 
  COMMON /ATSPDT/ Ee(0:LMAX2),P(0:LMAX2),DP(0:LMAX2),PE(0:LMAX2),DPE(0:LMAX2),PEI(0:LMAX2)
  COMMON /RADFU/  RRAD1(NRAD,0:LMAX2),RADE1(NRAD,0:LMAX2),RRAD2(NRAD,0:LMAX2),RADE2(NRAD,0:LMAX2)
  COMMON /UHELP/  UDUM(NRAD,6)                       
  COMMON /SYMo/   opimat(3,3,NSYM)
  COMMON /XA/     R(NRAD),BK(3)
  COMMON /MIM / MIMA(2)
  common /loabc/   alo(0:lomax,nloat),blo(0:lomax,nloat),clo(0:lomax,nloat),elo(0:lomax,nloat),plo(0:lomax),dplo(0:lomax),pelo(0:lomax),dpelo(0:lomax),peilo(0:lomax),pi12lo(0:lomax),pe12lo(0:lomax),a1lo(nrad,0:lomax),b1lo(nrad,0:lomax)
  common /lolog/   nlo,nlov,nlon,lapw,ilo(0:lomax),loor,lloor
  !ole ##### Begin #####
  !ole    COMMON /CLOGIC/  LSO,SPIN,REL
  COMMON /CLOGIC/  LSO,SPIN,REL,MME_FLAG
  !ole #####  End  #####
  !
  DATA  CZERO/(0.0D0,0.0D0)/,IMAG/(0.0D0,1.0D0)/,TWO/2.0D+0/   
  !
  !ad
  !ad _________________________  DEFINE CONSTANTS  _____________________
  !ad
  
  PI=ACOS(-1.0D0)                                      
  TWOPI=2.D0*PI                                          
  ACONT='CONT      '                                
  TEST=0.0D0                                             
  SQRT2=SQRT(2.0D0)                                     
  SQFP=SQRT(4.D0*PI)   
  ione=(0d0,1.0d0)                                    
  CIN=1.331258D-5
  CINC=7.29927D-3   ! 1/137.
  h=0
  !ad
  !ad   conversion from Rydberg to Hartree                       
  !ad
  CIN=CIN*4.0D0                                               
  IF (.NOT.REL) CIN=4.0*1.0D-22    
  !ad
  !ad __________________________________________________________________
  !ad
  
  IF (LSO.AND.SPIN) THEN
     ISO=2
  ELSE
     ISO=1
  END IF
  !ad
  !ad __________________ INITIALIZE MATRIX ELEMENTS  ___________________
  !adi
  
  !      call DELMATRIX
  
  !ad
  !ad ________________ CALCULATION OF RADIAL FUNCTIONS _________________
  !ad
  LFIRST=1  
  nnlo=0
  nato=nat
  allocate (loor1(0:lomax))
  allocate (nloO(NATO),nlovO(NATO),nlonO(NATO),iloO(0:lomax,NATO))
  allocate (lapwO(0:lmax2,NATO),loorO(0:lomax,nato))
  allocate (Pn(LMAX1,NATO,2),DPn(LMAX1,NATO,2),PEn(LMAX1,NATO,2),DPEn(LMAX1,NATO,2),PEIn(0:LMAX2,NATO,2) )
  allocate (aloO(0:lomax,NATO,nloat,2),bloO(0:lomax,NATO,nloat,2),cloO(0:lomax,NATO,nloat,2),eloO(0:lomax,NATO,nloat),ploO(0:lomax,NATO,2),dploO(0:lomax,NATO,2),peloO(0:lomax,NATO,2),dpeloO(0:lomax,NATO,2),peiloO(0:lomax,NATO,2),pi12lA(0:lomax,NATO,2),pe12lA(0:lomax,NATO,2) )      
  !LO
  allocate (RRAD01(NRAD,0:LMAX2),RADE01(NRAD,0:LMAX2),RRAD02(NRAD,0:LMAX2),RADE02(NRAD,0:LMAX2),a01lo(nrad,0:lomax),b01lo(nrad,0:lomax))
  allocate(rr(nrad,nat))
  allocate(ncore(nat))
  allocate(ncg(22)) 
  allocate(ncg1(nat)) 		
  allocate(nqn(22,nat))
  allocate(kappa(22,nat))
  allocate(nel(22,nat))
  
  allocate(iucl1ul(nat,2))
  allocate(iucl1udl(nat,2))
  allocate(iuclul1(nat,2))
  allocate(iucludl1(nat,2))
  allocate(iuclulol1(nat,2))
  allocate(iucl1ulol(nat,2))
  
  iucl1ul = 0.0d0
  iucl1udl = 0.0d0
  iuclul1 = 0.0d0
  iucludl1 = 0.0d0
  iuclulol1 = 0.0d0
  iucl1ulol = 0.0d0
  
  DO jatom=1,nat
     jri1=jri(jatom)
     do jjj=1,jri1
        rr(jjj,jatom)=Rnot(jatom)*exp((jjj-1)*dx(jatom))
     enddo
     core_counter=0
     read(30,11) ncore(jatom)    ! number of core states from case.inc
     kiatt=ncore(jatom)
     do ova=1,kiatt
        core_counter=core_counter+1
        read(30,12) nqn(ova,jatom),kappa(ova,jatom),nel(ova,jatom) ! this reads case.inc and gets n,kappa,occup
     enddo !ova
     ncg1(jatom)=core_counter
  ENDDO  !jatom	
  
  encore = maxval(ncore)
  allocate(ucore_temp(nrad,encore,nat,2))
  allocate(uscore_temp(nrad,encore,nat,2))
  allocate(ucore_1(nrad,2))
  allocate(uscore_1(nrad,2))
  !
  !___________________read core wfs_________________________________LO
  ucore_temp=0.
  uscore_temp=0.
  
  do is=1,iso
     do jatom=1,nat
        jri1=jri(jatom)
        read(34+is,*)
	if (nel(1,jatom).ne.0) then    !LO because of H
            kiatt=ncore(jatom)
            do k=1,kiatt
               read(34+is,*)
               read(34+is,2021) (ucore_temp(i,k,jatom,is), i=1,jri1)     !LO u_c
               read(34+is,2021) (uscore_temp(i,k,jatom,is), i=1,jri1)
            enddo
        endif
     enddo
     rewind(34+is)
		
     select case (core_name)
        !below=(core radial WF) * rr			
        !---------------------------------------------------------------------------------------------------			
     case ('1s')
        !
        ucore_1(1:jri1,is)=((ucore_temp(1:jri1,1,atom_num,is))*rr(1:jri1,atom_num))    !LO u_c * rr
        uscore_1(1:jri1,is)=((uscore_temp(1:jri1,1,atom_num,is))*rr(1:jri1,atom_num))
        pqn=1
        nln=0
        nnj=1
     case ('2s')
        ucore_1(1:jri1,is)=((ucore_temp(1:jri1,2,atom_num,is))*rr(1:jri1,atom_num))
        uscore_1(1:jri1,is)=((uscore_temp(1:jri1,2,atom_num,is))*rr(1:jri1,atom_num))			
        pqn=2 ! seems to ne n
        nln=0 ! seems to be l
        nnj=1
     case ('2ps')
        ucore_1(1:jri1,is)=((ucore_temp(1:jri1,3,atom_num,is))*rr(1:jri1,atom_num))
        uscore_1(1:jri1,is)=((uscore_temp(1:jri1,3,atom_num,is))*rr(1:jri1,atom_num))		
        pqn=2
        nln=1									
        nnj=1
     case ('2p')
        ucore_1(1:jri1,is)=((ucore_temp(1:jri1,4,atom_num,is))*rr(1:jri1,atom_num))
        uscore_1(1:jri1,is)=((uscore_temp(1:jri1,4,atom_num,is))*rr(1:jri1,atom_num))
        pqn=2
        nln=1	
        nnj=3
     case ('3s')
        ucore_1(1:jri1,is)=((ucore_temp(1:jri1,5,atom_num,is))*rr(1:jri1,atom_num))
        uscore_1(1:jri1,is)=((uscore_temp(1:jri1,5,atom_num,is))*rr(1:jri1,atom_num))	
        pqn=3
        nln=0
        nnj=1
     case ('3ps')
        ucore_1(1:jri1,is)=((ucore_temp(1:jri1,6,atom_num,is))*rr(1:jri1,atom_num))
        uscore_1(1:jri1,is)=((uscore_temp(1:jri1,6,atom_num,is))*rr(1:jri1,atom_num))
        pqn=3
        nln=1
        nnj=1
     case ('3p')
        ucore_1(1:jri1,is)=((ucore_temp(1:jri1,7,atom_num,is))*rr(1:jri1,atom_num))
        uscore_1(1:jri1,is)=((uscore_temp(1:jri1,7,atom_num,is))*rr(1:jri1,atom_num))
        pqn=3
        nln=1
        nnj=3
     case ('3ds')
        ucore_1(1:jri1,is)=((ucore_temp(1:jri1,8,atom_num,is))*rr(1:jri1,atom_num))
        uscore_1(1:jri1,is)=((uscore_temp(1:jri1,8,atom_num,is))*rr(1:jri1,atom_num))
        pqn=3
        nln=2
        nnj=3
     case ('3d')
        ucore_1(1:jri1,is)=((ucore_temp(1:jri1,9,atom_num,is))*rr(1:jri1,atom_num))
        uscore_1(1:jri1,is)=((uscore_temp(1:jri1,9,atom_num,is))*rr(1:jri1,atom_num))
        pqn=3
        nln=2
        nnj=5									!
     case default
        write(*,*) 'ERROR! CHECK EDGE!'
        !                        
        !----------------------------------------------------------------------------------------------------
     END SELECT
  enddo   ! is 
  !ad
  !ad....................... loop over all atoms ............JATOM=1,NAT
  !ad
  do JATOM=1,NAT 
     call CPUTIM(TTIME)
     TATST=TTIME   
     IF(jatom.GT.1) LFIRST=LFIRST + MULT(jatom-1)
     !ad    
     !ad......................... loop over spins..................IS=1,ISO
     !ad
     do is=1,ISO
        !      
        !-------------------starts reading core wfs---------------------------
        rewind(9+is)
        call ATPAR (REL,NAT,jatom,LFIRST,is) 
        call SAVEAPA(jatom,is)	
        !LO
        !LO____stores val radial wf into new vars from radfun_________________
        !LO
        if(jatom.eq.atom_num) then
           do z1=0,lmax2
              do z2=1,jri1
                 RRAD01(z2,z1)=rrad1(z2,z1)
                 RADE01(z2,z1)=rade1(z2,z1)
                 RRAD02(z2,z1)=rrad2(z2,z1)*CINC  ! Careful : B is multiplied by 1/speed_of_light
                 RADE02(z2,z1)=rade2(z2,z1)*CINC  ! Careful : B is multiplied by 1/speed_of_light
              enddo
           enddo
           !_______________________end lmax2 loop_______________________________
           do z1=0,lomax
              do z3=1,jri1
                 a01lo(z3,z1)=a1lo(z3,z1)
                 b01lo(z3,z1)=b1lo(z3,z1)*CINC
              enddo
           enddo
           !_________________________end lomax loop______________________________
           !LO_____________CALCULATION OF CORE RADIAL INTEGRALS__________________
           call momradintc(rel,atom_num,nln,is,iso)  
           !LO	
	endif   			!END if(jatom=atom_num)
     end do
     !ad
     !ad......................................................end..IS=1,ISO
     !ad
     nnlo=nnlo+nlo
     !adr
     call CPUTIM(TTIME) 
     TATEN=TTIME
     TATST=TATEN-TATST
     WRITE(6,1111) TATST  
     !ad
  enddo
  !LO............................................end jatom=1,nat
  !ad
  !ad...................................................end..JATOM=1,NAT
  !ad
  !ad __________________ RADIAL FUNCTIONS CALCULATED ___________________
  !ad
  !ad
  !ad......................... loop over k-points ......................
  !ad
  NK=0
  !ad
  !ad.......................... loop over spins ........................
  !ad
4 CONTINUE
  DO is=1,ISO   ! 1000
     !ad
     !ad __________________ READ EIGENSTATES (case.vector) ________________
     !ad
     !ad   first part of the vector-file has been read by atpar before
     !ad
     READ(9+is,END=999) S,T,Z,BNAME,N,NE    
     
     IF(BNAME.EQ.ACONT) STOP ' THIS CASE ISN`T POSSIBLE !!!'
     !ad
     if (is.eq.1) then
        NK=NK+1                                            
        !ad
        !      allocate (A(N,NE),bkx(n),bky(n),bkz(n),kx(n),ky(n),kz(n))
        allocate (A(NE,N),bkx(n),bky(n),bkz(n),kx(n),ky(n),kz(n))
        allocate (FJ(0:LMAX2,N),DFJ(0:LMAX2,N),e(ne))
        allocate (PHA(ne))
        allocate (ALM(NE,(LMAX+1)**2),BLM(NE,(LMAX+1)**2),cLM(NE,(LMAX+1)**2))
     endif
     
     DO J=1,(LMAX+1)**2
        DO I=1,NE
           ALM(I,J)=CZERO
           BLM(I,J)=CZERO
           CLM(I,J)=CZERO
        END DO
     END DO
     !ad
     !ad................ read reciprocal lattice vectors  .................                       
     !ad
     !ad
     READ(9+is) (KX(I),KY(I),KZ(I),I=1,N) 
     !ad
     !ad................... add k-point from first BZ  ....................                       
     !ad
     DO I=1,N    ! 5                                                    
        BKX(I)=(S+KX(I))                                               
        BKY(I)=(T+KY(I))                                               
        BKZ(I)=(Z+KZ(I))                                               
     ENDDO       ! 5
     !ad
     !ad............... read eigenvalues and coefficients  ................
     !ad                                                        
     NEMIN=1                                                     
     NEMAX=0 
     DO II=1,NE ! 14
        READ(9+is) NUM,E(NUM)       
        READ(9+is) (A(NUM,I),I=1,N)
        if (nk.eq.1) then
           WRITE(6,'("num= ",i6,"E(num)= ",f15.5, "emin=",f15.5)') num,e(NUM), emin
        endif
        IF(E(NUM).LT.EMIN) NEMIN=NEMIN+1                         
        IF(E(NUM).LE.EMAX) NEMAX=NEMAX+1
     ENDDO
     !ad
     !LO
     ivmax=nemax-nemin+1+150 !LO 
     if (is.eq.1) then
        allocate (DOPMX(nemin:nemax,2,6),DOPMY(nemin:nemax,2,6),DOPMZ(nemin:nemax,2,6)) 
        allocate (OPTX(nemin:nemax,6),OPTY(nemin:nemax,6),OPTZ(nemin:nemax,6))  
        allocate (MX_(nemin:nemax),MY_(nemin:nemax),MZ_(nemin:nemax))
        allocate (DOPMATX(nemin:nemax,6),DOPMATY(nemin:nemax,6),DOPMATZ(nemin:nemax,6))  
        allocate (N_(nemin:nemax),NN_(nemin:nemax),NIN(Nemin:nemax,Nemin:nemax))
        allocate (pxpy_1(nemin:nemax),pxmy_1(nemin:nemax),pz_1(nemin:nemax))
        allocate (mxcv_1(nemin:nemax),mycv_1(nemin:nemax),mzcv_1(nemin:nemax))
     endif
     !LO
     call DELMATRIXA(nemin,nemax)  !LO
     !ad
     MIMA(1)=NEMIN
     MIMA(2)=NEMAX
     !ad
     IF(NK.LT.KFIRST) THEN
        WRITE(6,7012) NK,S,T,Z   
        deallocate (A,bkx,bky,bkz,kx,ky,kz)
        deallocate (FJ,DFJ,e)
        deallocate (PHA)
        deallocate (ALM,BLM,cLM)
        deallocate (DOPMX,DOPMY,DOPMZ)
        deallocate (OPTX,OPTY,OPTZ)
        deallocate (MX_,MY_,MZ_)
        deallocate (DOPMATX,DOPMATY,DOPMATZ) 
        deallocate (N_,NN_,NIN)
        deallocate (pxpy_1,pxmy_1,pz_1)
        deallocate (mxcv_1,mycv_1,mzcv_1)
        !GOTO 1000
        CYCLE
     ELSE
        WRITE(6,701) NK,S,T,Z,NEMIN,NEMAX,NE
     ENDIF
     !ad   
     !ad
     !ad ________________ CONTRIBUTIONS FROM ATOMIC SPHERES _______________
     !ad
     !ad....................... loop over all atoms ............JATOM=1,NAT
     !ad
     LFIRST=1  
     DO JATOM=1,NAT                ! 50
        !ad
        !ad..............restore radial functions for each atom...............
        !ad
        call RESTAPA(jatom,is)      
        !ad
        DO l=0,LMAX    ! 555
           IF (l.LE.LOMAX) THEN
              lloor(l)=loor(l)
           ELSE
              lloor(l)=.FALSE.
           END IF
        ENDDO
        !ad    
        IF(jatom.GT.1) LFIRST=LFIRST + MULT(jatom-1) 
        if(atom_num.ne.jatom) CYCLE ! goto 50
        !ad
        !ad..................calculation of BESSEL FUNCTIONS..................
        !ad
        call HARMON(N,BKX,BKY,BKZ,LMAX2,FJ,DFJ,RMT(atom_num))                 
        !ad
        FAC=4.0D0*PI*RMT(atom_num)**2/SQRT(VOL)        !LO
        !ad
        !ad.................summation over equivalent positions...............
        !ad
        LATOM=LFIRST-1                                                    
        DO MU=1,MULT(atom_num)   ! 777
           call CPUTIM(TTIME)
           TATST=TTIME                                           
           LATOM=LATOM+1 
           !ad
           !ad.............initialization of coefficients ALM,BLM,CLM ...........
           !ad
           DO J=1,(LMAX+1)**2
              DO I=NEMIN,NEMAX
                 ALM(I,J)=CZERO
                 BLM(I,J)=CZERO
                 CLM(I,J)=CZERO
              END DO
           END DO
           !ad
           !ad......................loop over all plane waves....................
           !ad
           DO I=1,N-(nlo+nlon+nlov)  ! 120
              !ad...........local coordinates for phase-factor and YLM..............
              BK(1)=BKX(I)*BR1(1,1) + BKY(I)*BR1(1,2) + BKZ(I)*BR1(1,3)   
              BK(2)=BKX(I)*BR1(2,1) + BKY(I)*BR1(2,2) + BKZ(I)*BR1(2,3)   
              BK(3)=BKX(I)*BR1(3,1) + BKY(I)*BR1(3,2) + BKZ(I)*BR1(3,3)   
              call YLM (BK,LMAX,YL)                                     
              ARG1=BKX(I)*POS(1,LATOM)*TWOPI                             
              ARG2=BKY(I)*POS(2,LATOM)*TWOPI                             
              ARG3=BKZ(I)*POS(3,LATOM)*TWOPI                             
              PHS=EXP( IMAG*(ARG1+ARG2+ARG3) ) 
              !ad.........................determine ALM and BLM.....................
              DO NUM=NEMIN,NEMAX
                 PHA(NUM)=PHS*A(NUM,I)
              END DO
              INDEX=0  
              !ad.......................loop over all L values......................
              DO L=0,LMAX2                  ! 130
                 if(lapw(l)) then
                    AL=DFJ(L,I)*PE(L)-FJ(L,I)*DPE(L) 
                    BL=FJ(L,I)*DP(L)-DFJ(L,I)*P(L)
                 else
                    AL = FJ(L,I)/P(L)/RMT(atom_num)**2
                    BL = 0.d0
                 endif
                 MAX=2*L+1                                                         
                 !ad.......................loop over all M values......................
                 DO M=1,MAX               ! 140                                     
                    INDEX=INDEX+1
                    DO NUM=NEMIN,NEMAX
                       ALM(NUM,INDEX)=ALM(NUM,INDEX)+AL*conjg(YL(INDEX))*PHA(NUM)             
                       BLM(NUM,INDEX)=BLM(NUM,INDEX)+BL*conjg(YL(INDEX))*PHA(NUM)
                    END DO
                 ENDDO                    ! 140
                 !ad....................loop over all M values done....................
              ENDDO  !130              CONTINUE
              !ad....................loop over all L values done....................
           ENDDO  !120           CONTINUE
           !ad....................loop over all plane waves done.................
           !ad................determine ALM, BLM, and CLM for LO's...............
           if (nlo.ne.0) call LOMAIN(nemin,nemax,lfirst,latom,n,atom_num)
           INDEX=0
           !ad
           !ad.......................loop over all L values......................
           !ad
           DO L=0,LMAX2   ! 133
              MAX=2*L+1 
              CFAC=IMAG**L
              !ad
              !ad.......................loop over all M values......................
              !ad
              DO M=1,MAX  ! 133
                 INDEX=INDEX+1
                 DO NUM=NEMIN,NEMAX     ! 133
                    ALM(NUM,INDEX)=ALM(NUM,INDEX)*CFAC
                    BLM(NUM,INDEX)=BLM(NUM,INDEX)*CFAC
                    CLM(NUM,INDEX)=CLM(NUM,INDEX)*CFAC
                 ENDDO  ! 133
              ENDDO     ! 133
           ENDDO        ! 133
           !ad
           !ad.................loop over all L and M values done.................
           !ad                                                    
           call CPUTIM(TTIME)
           TMAT=TTIME
           !ad
           !ad ___________________ MOMENTUM MATRIX ELEMENTS _____________________
           !ad
           !ad
           !ad.........matrix elements M(n',n) between basis functions...........
           !
           if (iso.eq.1) then
              dopmx=czero
              dopmy=czero
              dopmz=czero
           endif
           optx=czero
           opty=czero
           optz=czero
           
           jkl=0
           do mm=-nnj,nnj,2
              jkl=jkl+1
              call mmatcv(nln,atom_num,ivmax,nemin,nemax,nnj,mm,is,lso,spin,nk)    
              do iv=nemin,nemax
                 OPTX(iv,jkl) =  MX_(iv)*FAC
                 OPTY(iv,jkl) =  MY_(iv)*FAC
                 OPTZ(iv,jkl) =  MZ_(iv)*FAC
              enddo
           enddo
           !ad
           !ad ..............NBINDEX: index of band combination..................
           !ad
           
           call cputim(ttime)
           tmat=ttime-tmat
           TATST=TTIME-TATST
        ENDDO  !777        CONTINUE
        !ad
        !ad..............summation over equivalent positions done.............
        !ad
     ENDDO  !50      CONTINUE
     !ad
     !ad....................... loop over all atoms done...................
     !ad
     jkl=0
     do mm=-nnj,nnj,2
        jkl=jkl+1
        do iv=nemin,nemax
           dopmx(iv,is,jkl)=optx(iv,jkl)
           dopmy(iv,is,jkl)=opty(iv,jkl)
           dopmz(iv,is,jkl)=optz(iv,jkl)
        enddo
     enddo
     call DELMATRIXA(nemin,nemax)   !LO
  ENDDO   !1000 CONTINUE
  !ad
  !ad....................... loop over spins done ......................
  !ad
  NBINDEX=0
  DO NB1=NEMIN,NEMAX
     NBINDEX=NBINDEX+1
     jkl=0
     do mm=-nnj,nnj,2
        jkl=jkl+1
        DOPMATX(NB1,jkl)=-ione*(DOPMX(NB1,1,jkl)+DOPMX(NB1,2,jkl)) 
        DOPMATY(NB1,jkl)=-ione*(DOPMY(NB1,1,jkl)+DOPMY(NB1,2,jkl))
        DOPMATZ(NB1,jkl)=-ione*(DOPMZ(NB1,1,jkl)+DOPMZ(NB1,2,jkl))
     enddo
  ENDDO
  
  call OUTMATABZ(cornum,moddo,nk,nnj)
  call DELMATRIXA(nemin,nemax)
  !
  !........ GO FOR NEXT K POINT ........................................
  deallocate (A,bkx,bky,bkz,kx,ky,kz)
  deallocate (FJ,DFJ,e)
  deallocate (PHA)
  deallocate (ALM,BLM,cLM)
  deallocate (DOPMX,DOPMY,DOPMZ)
  deallocate (OPTX,OPTY,OPTZ)
  deallocate (MX_,MY_,MZ_)
  deallocate (DOPMATX,DOPMATY,DOPMATZ)
  deallocate (N_,NN_,NIN)
  deallocate (pxpy_1,pxmy_1,pz_1)
  deallocate (mxcv_1,mycv_1,mzcv_1)      
  IF (KUPLIMIT.GT.NK) GOTO 4
  !ad
  !ad.......................loop over k-points done.....................
  !ad
  !	
999 CONTINUE       
  deallocate(loor1)     
  deallocate (nloO,nlovO,nlonO,iloO)                                 
  deallocate (lapwO,loorO)
  deallocate (Pn,DPn,PEn,DPEn,PEIn)
  deallocate (aloO,bloO,cloO,eloO,dploO,dpeloO,pi12lA,ploO,peloO,peiloO,pe12lA)
  deallocate (RRAD01,RADE01,RRAD02,RADE02,a01lo,b01lo)
  deallocate(rr,ncore,ncg,ncg1,nqn,kappa,nel)
  deallocate(iucl1ul)
  deallocate(iucl1udl)
  deallocate(iuclul1)
  deallocate(iucludl1)
  deallocate(iuclulol1)
  deallocate(iucl1ulol)
  deallocate(ucore_temp)
  deallocate(uscore_temp)
  deallocate(ucore_1)
  deallocate(uscore_1)
  REWIND 10 
  rewind 30
  do is=1,iso
     rewind (17+is)
  enddo
  RETURN
1111 FORMAT( /,'CPUTIM FOR ATOMIC INTEGRALS .',F10.2,/)
441 FORMAT(' cputime for mat-calc:    ',f8.2,'/',F8.2)  
701 FORMAT('K-POINT',I5,': [',3f7.4,']',3x,'NEMIN-MAX: ',2I5,'   NE:',I5)
7012 FORMAT('K-POINT',I5,': [',3f7.4,']   IGNORED',/)
11 FORMAT(I2)
12 FORMAT(I1,1X,I2,1X,I1)
2021 FORMAT(3X,4E19.12)
19189 format(2X,I2,2X,F10.5)
19190 format(4(1X,I3))
19191 format(2X,6E13.6)
1101 format (4(1X,I3))
1001 format(2X,I3,3X,F8.5)
1102 format(2X,2E13.6)
END SUBROUTINE COR_MAT

!ad
SUBROUTINE SAVEAPA(atom_num,is)
  use loabco
  use atspa
  use lologo
  INCLUDE 'param.inc'
  !
  IMPLICIT REAL*8 (A-H,O-Z)
  !ad
  integer(4),intent (in) :: atom_num
  LOGICAL   loor(0:lomax),lloor(0:lmax2)
  LOGICAL   lapw(0:lmax2)
  !ad
  COMMON /ATSPDT/  E(0:LMAX2),P(0:LMAX2),DP(0:LMAX2),PE(0:LMAX2),DPE(0:LMAX2),PEI(0:LMAX2)
  common /loabc/   alo(0:lomax,nloat),blo(0:lomax,nloat),clo(0:lomax,nloat),elo(0:lomax,nloat),plo(0:lomax),dplo(0:lomax),pelo(0:lomax),dpelo(0:lomax),peilo(0:lomax),pi12lo(0:lomax),pe12lo(0:lomax),a1lo(nrad,0:lomax),b1lo(nrad,0:lomax)
  common /lolog/   nlo,nlov,nlon,lapw,ilo(0:lomax),loor,lloor
  do l=0,lmax2
     l1=l+1
     Pn(l1,atom_num,is)=P(l)
     DPn(l1,atom_num,is)=DP(l)
     PEn(l1,atom_num,is)=PE(l)
     DPEn(l1,atom_num,is)=DPE(l)
     PEIn(l,atom_num,is)=PEI(l)
  end do
  !ad
  do l=0,lomax
     iloO(l,atom_num)        = ilo(l)
     do k=1,ilo(l)
        aloO(l,atom_num,k,is)     = alo(l,k)
        bloO(l,atom_num,k,is)     = blo(l,k)
        cloO(l,atom_num,k,is)     = clo(l,k)
        eloO(l,atom_num,k)        = elo(l,k)
     enddo
     ploO(l,atom_num,is)     = plo(l)
     dploO(l,atom_num,is)    = dplo(l)
     peloO(l,atom_num,is)    = pelo(l)
     dpeloO(l,atom_num,is)   = dpelo(l)
     peiloO(l,atom_num,is)   = peilo(l)
     pi12lA(l,atom_num,is)   = pi12lo(l)
     pe12lA(l,atom_num,is)   = pe12lo(l)
     loorO(l,atom_num)       = loor(l)
     lapwO(l,atom_num)       = lapw(l)
     !        iloO(l,atom_num)        = ilo(l)
  end do
  !ad
  nloO(atom_num)  = nlo
  nlonO(atom_num) = nlon
  nlovO(atom_num) = nlov
  RETURN
END SUBROUTINE SAVEAPA
!ad
!ad
!ad      
SUBROUTINE RESTAPA(atom_num,is)
  use loabco
  use atspa
  use lologo
  !ad
  !ad   restores the radial functions for each atom
  !ad
  INCLUDE 'param.inc'
  !
  IMPLICIT REAL*8 (A-H,O-Z)
  integer(4), intent(in) :: atom_num
  logical   loor(0:lomax),lloor(0:lmax2)
  LOGICAL   lapw(0:lmax2)
  
  COMMON /ATSPDT/  E(0:LMAX2),P(0:LMAX2),DP(0:LMAX2),PE(0:LMAX2),DPE(0:LMAX2),PEI(0:LMAX2)
  common /loabc/   alo(0:lomax,nloat),blo(0:lomax,nloat),clo(0:lomax,nloat),elo(0:lomax,nloat),plo(0:lomax),dplo(0:lomax),pelo(0:lomax),dpelo(0:lomax),peilo(0:lomax),pi12lo(0:lomax),pe12lo(0:lomax),a1lo(nrad,0:lomax),b1lo(nrad,0:lomax)
  common /lolog/   nlo,nlov,nlon,lapw,ilo(0:lomax),loor,lloor
  do l=0,lmax2
     l1=l+1
     P(l)=Pn(l1,atom_num,is)
     DP(l)=DPn(l1,atom_num,is)
     PE(l)=PEn(l1,atom_num,is)
     DPE(l)=DPEn(l1,atom_num,is)
     PEI(l)=PEIn(l,atom_num,is)
  end do
  !ad
  do l=0,lomax 
     ilo(l)   = iloO(l,atom_num)
     do k=1,ilo(l)
        alo(l,k)   = aloO(l,atom_num,k,is)
        blo(l,k)   = bloO(l,atom_num,k,is)
        clo(l,k)   = cloO(l,atom_num,k,is)
        elo(l,k)   = eloO(l,atom_num,k)
     enddo
     plo(l)   = ploO(l,atom_num,is)
     dplo(l)  = dploO(l,atom_num,is)
     pelo(l)  = peloO(l,atom_num,is)
     dpelo(l) = dpeloO(l,atom_num,is)
     peilo(l) = peiloO(l,atom_num,is)
     pi12lo(l)= pi12lA(l,atom_num,is)
     pe12lo(l)= pe12lA(l,atom_num,is)
     loor(l)  = loorO(l,atom_num)
     lapw(l)  = lapwO(l,atom_num)
     !        ilo(l)   = iloO(l,atom_num)
  end do
  !ad
  nlo=nloO(atom_num)
  nlon=nlonO(atom_num)
  nlov=nlovO(atom_num)
  RETURN
END SUBROUTINE RESTAPA
!ad
!ad

SUBROUTINE DELMATRIXA(nemin,nemax)  !LO
  use opme
  INCLUDE 'param.inc'
  IMPLICIT REAL*8 (A-H,O-Z) 
  PARAMETER   (ZERO = 0.0D+0)
  !                                                                       
  COMMON /LEAD/ KFIRST,KLAST,KEND,KSTEP,KOUT,KSTOP
  COMMON /COM/  EMIN,EMAX,ELECN,EULIMIT,EDLIMIT,NK,IOUT,NSPIN,NAT,NBAND,ix,NB(NKPT),MINWAV,MAXWAV	!LO
  DATA  CZERO/(0.0D-0,0.0D-0)/
  !ad
  !ad
  DO NBINDEX = nemin,nemax 
     do i=1,6 
        DOPMATX(NBINDEX,i)=CZERO
        DOPMATY(NBINDEX,i)=CZERO
        DOPMATZ(NBINDEX,i)=CZERO
     enddo
  END DO
  
  RETURN
END SUBROUTINE DELMATRIXA

